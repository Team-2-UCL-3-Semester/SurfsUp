@page "/chathub"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject AuthenticationStateProvider GetAutenticationStateAsync

<PageTitle>Chat</PageTitle>

<div class="form-group">
    <div class="form-group">@userName</div>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>



@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;
    [Parameter]
    public string userName{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = await GetAutenticationStateAsync.GetAuthenticationStateAsync();

        if(user.User.Identity.IsAuthenticated == true){
            userName = user.User.Identity.Name;
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathubs"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (userName, message) =>
        {
            var encodedMsg = $"{userName}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userName, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}