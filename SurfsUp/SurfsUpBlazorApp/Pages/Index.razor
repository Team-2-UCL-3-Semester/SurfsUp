@page "/"
@using Microsoft.AspNetCore.Mvc
@using System.Security.Claims;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Authorization;
@using System.Data;
@inject HttpClient Http
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager navManager


<PageTitle>Index</PageTitle>
<head></head>
@if (boards == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <input @bind="SearchWord" type="text" />
    <button class="btn btn-primary" @onclick="Search">Søg</button>

    <table class="table">
        <thead>
            <tr>
                <th>BoardIMG</th>
                <th>Name</th>
                <th>Length</th>
                <th>Width</th>
                <th>Thickness</th>
                <th>Volume</th>
                <th>Type</th>
                <th>Price</th>
                <th>Equipment</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var board in boards)
            {
                if (board != null)
                {
                    @if (board.IsRented == false)
                    {
                        <tr>
                            <td><img src="@board.imgPath" width="60" length="60" /></td>
                            <td>@board.Name</td>
                            <td>@board.Length</td>
                            <td>@board.Width</td>
                            <td>@board.Thickness</td>
                            <td>@board.Volume</td>
                            <td>@board.Type</td>
                            <td>@board.Price</td>
                            <td>@board.Equipment</td>
                            <td>
                                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">Lej</button>
                                @*<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">*@
                            </td>
                        </tr>
                    }
                }
            }
            <div>
                <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <div class="input-group date" data-provide="datepicker">
                                    <input type="text" class="form-control">
                                    <div class="input-group-addon">
                                        <span class="glyphicon glyphicon-th"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary">Save changes</button>
                        </div>
                    </div>
                </div>
            </div>


        </tbody>
    </table>

}

@code {
    private Board[]? boards;

    //Array of temporary boards to reset the value of the "boards" array when searching
    private Board[]? tempBoards;

    [Parameter]
    public string SearchWord { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //API call that un-rents rented boards if the rent times have expired
        await Http.GetStringAsync("https://localhost:7154/check");
        await GetBoards();
    }

    public async Task GetBoards()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        //Sets the boards array so the boards show up on screen. Uses api version 2 if the user isn't logged in
        if (authstate.User.Identity.IsAuthenticated == true)
        {
            boards = await Http.GetFromJsonAsync<Board[]>("https://localhost:7154/Index");
        }
        else
        {
            boards = await Http.GetFromJsonAsync<Board[]>("https://localhost:7154/IndexV2?api-version=2.0");
        }


        tempBoards = boards;
    }

    public class Board
    {
        public Guid Id { get; set; }

        public string Name { get; set; }


        public decimal Length { get; set; }


        public decimal Width { get; set; }


        public decimal Thickness { get; set; }


        public decimal Volume { get; set; }


        public string Type { get; set; }


        public decimal Price { get; set; }
        public string? Equipment { get; set; }
        public string? imgPath { get; set; }


        public bool IsRented { get; set; }
        public DateTime? RentedDate { get; set; }



        public byte[] RowVersion { get; set; }
    }

    public async void StartRenting(Guid boardId)
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();

        //Checks if the user is logged in, if not, it will set the userId to a guest account's userId
        if (authstate.User.Identity.IsAuthenticated == true)
        {
            var user = authstate.User.Claims.First().Value;
            await Rent(Http, user, boardId);
        }
        else
        {
            string user = "2ed315c0-1ca2-4a4b-aedf-70fa672ca7e8";
            await Rent(Http, user, boardId);
        }
    }

    public async Task Rent(HttpClient client, string userId, Guid id)
    {
        await client.GetStringAsync($"https://localhost:7154/rent?userId={userId}&id={id}");
        await GetBoards();
        navManager.NavigateTo("/Confirmation");
    }
    public void Search()
    {
        //Resetting the boards array so the user can search between all boards and not the preveously searched boards
        boards = tempBoards;
        Board[] searchedBoards = new Board[boards.Length];
        int currentArraySize = 0;

        //Converting the searched words to upper so the program wont care about small or big letters
        string search = SearchWord.ToUpper();

        if (SearchWord == null)
        {
            SearchWord = "";
        }

        for (int i = 0; i < boards.Length; i++)
        {
            //Converting the board names to upper so the program wont care about small or big letters like before
            if (boards[i].Name.ToUpper().Contains(search) || boards[i].Type.ToUpper().Contains(search))
            {
                searchedBoards[currentArraySize] = boards[i];
                currentArraySize++;
            }
        }
        boards = searchedBoards;
    }
}